using System;
using System.Collections.Generic;
using System.Numerics;

namespace lab_huiznaet_liambda_viragenia
{
    class Program
    {
        static void Main()
        {
            List<Function> examples = new List<Function>() { first, second, third };

            List<double> v1 = new List<double>();
            List<double> v2 = new List<double>();

            double temp;
            int p;

            Function Y1;
            Y1 = x => 3 * x - Math.Sin(2 * x);

            Function Y2;
            Y2 = x => Math.Exp(-2 * x) - 2 * x + 1;

            while (true)
            {
                Console.WriteLine("Введите номер от 1 до 5");
                int count_example = int.Parse(Console.ReadLine());

                if (count_example == 1)
                {
                    Console.WriteLine("Введите x");
                    double x = double.Parse(Console.ReadLine());
                    result(x, examples[count_example - 1]);
                }

                else if (count_example == 2)
                {
                    Console.WriteLine("Введите x");
                    double x = double.Parse(Console.ReadLine());
                    result(x, examples[count_example - 1]);
                }

                else if (count_example == 3)
                {
                    Console.WriteLine("Введите x");
                    double x = double.Parse(Console.ReadLine());
                    result(x, examples[count_example - 1]);
                }

                else if (count_example == 4)
                {
                    Console.WriteLine("Введите n");
                    p = int.Parse(Console.ReadLine());
                    Integral I1;
                    I1 = (a, b, n, Y) => (b - a) / n * Sum(a, b, n, Y);
                    Console.WriteLine(I1(0, 2 * Math.PI, p, Y1) - I1(0, Math.PI, p, Y2));
                }

                else if (count_example == 5)
                {
                    Console.WriteLine("Введите выборки");
                    int size = int.Parse(Console.ReadLine());

                    for (int i = 0; i < size; i++)
                    {
                        v1.Add(double.Parse(Console.ReadLine()));
                        v2.Add(double.Parse(Console.ReadLine()));
                    }

                    Console.WriteLine(v1[2]);
                    Console.WriteLine(Sum3(v1, v2) / Sum2(v1) * Sum2(v2));
                }

                Console.WriteLine("Продолжить? (1/0)");
                string prod = Console.ReadLine();
                if (prod != "1")
                {
                    break;
                }
            }
        }

        delegate double Function(double x);
        delegate double Integral(double a, double b, int n, Function Y);

        static double Sum(double a, double b, int n, Function Y)
        {
            double sum = 0;
            for (int i = 0; i < n - 1; i++)
            {
                sum += Y(a + i * (b - a) / n);
            }
            return sum;
        }

        static double Sum(List<double> x)
        {
            double sum = 0;
            for (int i = 0; i < x.Count; i++)
            {
                sum += x[i];
            }
            return sum;
        }

        static double Sum2(List<double> x)
        {
            double sum = 0;
            for (int i = 0; i < x.Count; i++)
            {
                sum += Math.Pow((x[i] - Sum(x)), 2);
            }
            return sum;
        }

        static double Sum3(List<double> x, List<double> y)
        {
            double sum = 0;
            for (int i = 0; i < x.Count; i++)
            {
                sum += (x[i] - Sum(x)) * (y[i] - Sum(y));
            }
            return sum;
        }

        static void result(double x, Function operation)
        {
            Console.WriteLine(operation(x));
        }

        static double first(double x)
        {
            if (x < 1)
            {
                return Math.Tan(2 * x);
            }
            else
            {

                return Math.Pow((2 * x + 10), 3);
            }
        }
        static double second(double x)
        {
            int temp = 1;
            for (int i = 2; i <= x; i = i + 2)
            {
                temp *= i;
            }
            return x * x * temp;
        }

        static double third(double x)
        {
            if (x < -7)
            {
                return -3 * Math.Sin(2 * x);
            }
            else if (x >= -7 && x < 0)
            {
                return Complex.Pow(x, 0.5).Magnitude;
            }
            else
            {
                return 1 / x;
            }
        }

        static double four(double a, double b, double n)
        {
            double temp_sum = 0;
            for (int i = 0; i <= n - 1; i++)
            {
                temp_sum += (a + i * (b - a) / n);
            }
            return (b - a) / n * temp_sum;
        }
    }
}
